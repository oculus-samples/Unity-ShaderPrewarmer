// Copyright (c) Meta Platforms, Inc. and affiliates.

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/ShaderPrewarmTool/Input/DebugControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @DebugControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @DebugControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""DebugControls"",
    ""maps"": [
        {
            ""name"": ""Basic"",
            ""id"": ""454629ee-ff2e-488f-8416-4ed8b66df54b"",
            ""actions"": [
                {
                    ""name"": ""Sim Oculus Button A"",
                    ""type"": ""Button"",
                    ""id"": ""f467b8d8-43cc-4f9e-8d3f-8dda0ebdc578"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Sim Oculus Button B"",
                    ""type"": ""Button"",
                    ""id"": ""4e7f390a-8f35-4f69-96be-fcac3c32824d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9c8e2f56-d3da-4dfc-aa22-42e98ea58a05"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sim Oculus Button A"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""82429253-fdb0-411f-9c1a-8aee973c83b7"",
                    ""path"": ""<Keyboard>/b"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sim Oculus Button B"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Basic
        m_Basic = asset.FindActionMap("Basic", throwIfNotFound: true);
        m_Basic_SimOculusButtonA = m_Basic.FindAction("Sim Oculus Button A", throwIfNotFound: true);
        m_Basic_SimOculusButtonB = m_Basic.FindAction("Sim Oculus Button B", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Basic
    private readonly InputActionMap m_Basic;
    private List<IBasicActions> m_BasicActionsCallbackInterfaces = new List<IBasicActions>();
    private readonly InputAction m_Basic_SimOculusButtonA;
    private readonly InputAction m_Basic_SimOculusButtonB;
    public struct BasicActions
    {
        private @DebugControls m_Wrapper;
        public BasicActions(@DebugControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @SimOculusButtonA => m_Wrapper.m_Basic_SimOculusButtonA;
        public InputAction @SimOculusButtonB => m_Wrapper.m_Basic_SimOculusButtonB;
        public InputActionMap Get() { return m_Wrapper.m_Basic; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BasicActions set) { return set.Get(); }
        public void AddCallbacks(IBasicActions instance)
        {
            if (instance == null || m_Wrapper.m_BasicActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_BasicActionsCallbackInterfaces.Add(instance);
            @SimOculusButtonA.started += instance.OnSimOculusButtonA;
            @SimOculusButtonA.performed += instance.OnSimOculusButtonA;
            @SimOculusButtonA.canceled += instance.OnSimOculusButtonA;
            @SimOculusButtonB.started += instance.OnSimOculusButtonB;
            @SimOculusButtonB.performed += instance.OnSimOculusButtonB;
            @SimOculusButtonB.canceled += instance.OnSimOculusButtonB;
        }

        private void UnregisterCallbacks(IBasicActions instance)
        {
            @SimOculusButtonA.started -= instance.OnSimOculusButtonA;
            @SimOculusButtonA.performed -= instance.OnSimOculusButtonA;
            @SimOculusButtonA.canceled -= instance.OnSimOculusButtonA;
            @SimOculusButtonB.started -= instance.OnSimOculusButtonB;
            @SimOculusButtonB.performed -= instance.OnSimOculusButtonB;
            @SimOculusButtonB.canceled -= instance.OnSimOculusButtonB;
        }

        public void RemoveCallbacks(IBasicActions instance)
        {
            if (m_Wrapper.m_BasicActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IBasicActions instance)
        {
            foreach (var item in m_Wrapper.m_BasicActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_BasicActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public BasicActions @Basic => new BasicActions(this);
    public interface IBasicActions
    {
        void OnSimOculusButtonA(InputAction.CallbackContext context);
        void OnSimOculusButtonB(InputAction.CallbackContext context);
    }
}
